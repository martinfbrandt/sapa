{"ast":null,"code":"import _regeneratorRuntime from \"/Users/martinbrandt/my-rest-example-app/calorie-counter/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/martinbrandt/my-rest-example-app/calorie-counter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { assoc, propOr } from 'ramda'; // checks for error on api call and returns it to be displayed\n\nvar throwError =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(response) {\n    var errBody;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!unauthorizedClearSession(response)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 2:\n            if (!(response.status !== 200)) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            errBody = _context.sent;\n            throw Error(errBody.error);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function throwError(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar unauthorizedClearSession = function unauthorizedClearSession(response) {\n  if (response.status === 401) {\n    sessionStorage.clear();\n    return true;\n  }\n\n  return false;\n};\n\nexport var signUpUser =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(user) {\n    var created;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch('http://localhost:3000/api/signup', {\n              method: 'POST',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(assoc('roles', ['user'], user))\n            });\n\n          case 3:\n            created = _context2.sent;\n\n            if (!(created.status === 409)) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw Error(\"User with email address \".concat(user.email, \" exists\"));\n\n          case 6:\n            _context2.next = 8;\n            return throwError(created);\n\n          case 8:\n            return _context2.abrupt(\"return\", created.json());\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            throw _context2.t0;\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 11]]);\n  }));\n\n  return function signUpUser(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadUser =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(userId) {\n    var jwt, fetchedUser;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n            if (!(jwt === null)) {\n              _context3.next = 3;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 3:\n            _context3.prev = 3;\n            _context3.next = 6;\n            return fetch(\"http://localhost:3000/api/users/\".concat(userId), {\n              method: 'GET',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n              }\n            });\n\n          case 6:\n            fetchedUser = _context3.sent;\n            _context3.next = 9;\n            return throwError(fetchedUser);\n\n          case 9:\n            return _context3.abrupt(\"return\", fetchedUser.json());\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](3);\n            throw _context3.t0;\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[3, 12]]);\n  }));\n\n  return function loadUser(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var logInUser =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(user) {\n    var loggedInUser;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return fetch('http://localhost:3000/api/login', {\n              method: 'POST',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(user)\n            });\n\n          case 3:\n            loggedInUser = _context4.sent;\n            _context4.next = 6;\n            return throwError(loggedInUser);\n\n          case 6:\n            return _context4.abrupt(\"return\", loggedInUser.json());\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            throw _context4.t0;\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 9]]);\n  }));\n\n  return function logInUser(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var loadUserMeals =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5() {\n    var jwt, mealResponse;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n            if (!(jwt === null)) {\n              _context5.next = 3;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 3:\n            _context5.prev = 3;\n            _context5.next = 6;\n            return fetch('http://localhost:3000/api/meals', {\n              method: 'GET',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n              }\n            });\n\n          case 6:\n            mealResponse = _context5.sent;\n            _context5.next = 9;\n            return throwError(mealResponse);\n\n          case 9:\n            return _context5.abrupt(\"return\", mealResponse.json());\n\n          case 12:\n            _context5.prev = 12;\n            _context5.t0 = _context5[\"catch\"](3);\n            throw _context5.t0;\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[3, 12]]);\n  }));\n\n  return function loadUserMeals() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var saveNewMeal =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(meal) {\n    var jwt, newMeal;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n            if (!(jwt == null)) {\n              _context6.next = 3;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 3:\n            _context6.prev = 3;\n            _context6.next = 6;\n            return fetch('http://localhost:3000/api/meals', {\n              method: 'POST',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n              },\n              body: JSON.stringify(meal)\n            });\n\n          case 6:\n            newMeal = _context6.sent;\n            _context6.next = 9;\n            return throwError(newMeal);\n\n          case 9:\n            return _context6.abrupt(\"return\", newMeal.json());\n\n          case 12:\n            _context6.prev = 12;\n            _context6.t0 = _context6[\"catch\"](3);\n            throw _context6.t0;\n\n          case 15:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[3, 12]]);\n  }));\n\n  return function saveNewMeal(_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var updateMeal =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee7(mealId, meal) {\n    var jwt, updatedMeal;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n            if (!(jwt === null)) {\n              _context7.next = 3;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 3:\n            _context7.prev = 3;\n            _context7.next = 6;\n            return fetch(\"http://localhost:3000/api/meals/\".concat(mealId), {\n              method: 'PATCH',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n              },\n              body: JSON.stringify(meal)\n            });\n\n          case 6:\n            updatedMeal = _context7.sent;\n            _context7.next = 9;\n            return throwError(updatedMeal);\n\n          case 9:\n            return _context7.abrupt(\"return\", updatedMeal.json());\n\n          case 12:\n            _context7.prev = 12;\n            _context7.t0 = _context7[\"catch\"](3);\n            throw _context7.t0;\n\n          case 15:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[3, 12]]);\n  }));\n\n  return function updateMeal(_x6, _x7) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var deleteMeal =\n/*#__PURE__*/\nfunction () {\n  var _ref8 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee8(mealId) {\n    var jwt, response;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n            if (!(jwt == null)) {\n              _context8.next = 3;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 3:\n            _context8.prev = 3;\n            _context8.next = 6;\n            return fetch(\"http://localhost:3000/api/meals/\".concat(mealId), {\n              method: 'DELETE',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Authorization\": jwt\n              }\n            });\n\n          case 6:\n            response = _context8.sent;\n            _context8.next = 9;\n            return throwError(response);\n\n          case 9:\n            _context8.next = 14;\n            break;\n\n          case 11:\n            _context8.prev = 11;\n            _context8.t0 = _context8[\"catch\"](3);\n            throw _context8.t0;\n\n          case 14:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[3, 11]]);\n  }));\n\n  return function deleteMeal(_x8) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var updateUser =\n/*#__PURE__*/\nfunction () {\n  var _ref9 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee9(userId, user) {\n    var jwt, updatedUser;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n            if (!(jwt == null)) {\n              _context9.next = 3;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 3:\n            _context9.prev = 3;\n            _context9.next = 6;\n            return fetch(\"http://localhost:3000/api/users/\".concat(userId), {\n              method: 'PATCH',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n              },\n              body: JSON.stringify(user)\n            });\n\n          case 6:\n            updatedUser = _context9.sent;\n            _context9.next = 9;\n            return throwError(updatedUser);\n\n          case 9:\n            return _context9.abrupt(\"return\", updatedUser.json());\n\n          case 12:\n            _context9.prev = 12;\n            _context9.t0 = _context9[\"catch\"](3);\n            throw _context9.t0;\n\n          case 15:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[3, 12]]);\n  }));\n\n  return function updateUser(_x9, _x10) {\n    return _ref9.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/martinbrandt/my-rest-example-app/calorie-counter/src/Api.js"],"names":["assoc","propOr","throwError","response","unauthorizedClearSession","Error","status","json","errBody","error","sessionStorage","clear","signUpUser","user","fetch","method","mode","cache","url","headers","body","JSON","stringify","created","email","loadUser","userId","jwt","parse","getItem","fetchedUser","logInUser","loggedInUser","loadUserMeals","mealResponse","saveNewMeal","meal","newMeal","updateMeal","mealId","updatedMeal","deleteMeal","updateUser","updatedUser"],"mappings":"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","sourcesContent":["import {assoc, propOr} from 'ramda';\n\n// checks for error on api call and returns it to be displayed\nconst throwError = async response => {\n    if(unauthorizedClearSession(response)){\n        throw Error('Expired Token')\n    }\n    if(response.status !== 200){\n        const errBody = await response.json();\n        throw Error(errBody.error)\n    }\n}\n\n\nconst unauthorizedClearSession = response => {\n    if(response.status === 401){\n        sessionStorage.clear();\n        return true;\n    }\n    return false;\n}\nexport const signUpUser = async user => {\n    try {\n        const created = await fetch('http://localhost:3000/api/signup', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(assoc('roles', ['user'], user))\n        })\n\n        if(created.status === 409){\n            throw Error(`User with email address ${user.email} exists`)\n        } \n\n        await throwError(created)\n        return created.json();\n        \n    } catch(err) {\n        throw err;\n    }\n}\n\nexport const loadUser = async userId => {\n    const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n    if(jwt === null){\n        throw Error('Expired Token')\n    }\n    try {\n        const fetchedUser = await fetch(`http://localhost:3000/api/users/${userId}`, {\n            method:'GET',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n            },\n        })\n        await throwError(fetchedUser)\n        return fetchedUser.json();\n    } catch(err) {\n        throw err;\n    }\n}\n\n\nexport const logInUser = async user => {\n    try {\n        const loggedInUser = await  fetch('http://localhost:3000/api/login', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(user)\n        });\n        await throwError(loggedInUser)\n        return loggedInUser.json();\n    } catch(err) {\n        throw err;\n    }\n}\n\n\nexport const loadUserMeals = async () => {\n    const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n    if(jwt === null){\n        throw Error('Expired Token')\n    }\n\n    try {\n        const mealResponse = await fetch('http://localhost:3000/api/meals', {\n            method:'GET',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\":jwt\n            },\n        })\n \n        await throwError(mealResponse)\n        return mealResponse.json();\n    } catch(err) {\n        throw err;\n    }\n}\n\nexport const saveNewMeal = async meal => {\n    const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n    if(jwt == null){\n        throw Error('Expired Token')\n    }\n    try {\n        const newMeal = await fetch('http://localhost:3000/api/meals', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt \n            },\n            body: JSON.stringify(meal)\n        })\n        await throwError(newMeal)\n        return newMeal.json();\n    } catch(err) {\n        throw err;\n    }\n}\n\n    export const updateMeal = async (mealId, meal) => {\n        const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n        if(jwt === null){\n            throw Error('Expired Token')\n        }\n\n        try {\n            const updatedMeal = await fetch(`http://localhost:3000/api/meals/${mealId}`, {\n                method:'PATCH',\n                mode: 'cors',\n                cache: \"no-cache\",\n                url: 'http://localhost:3000',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": jwt\n                },\n                body: JSON.stringify(meal)\n            })\n            await throwError(updatedMeal)\n            return updatedMeal.json();\n        } catch(err) {\n            throw err;\n        }\n    }\n\n    export const deleteMeal = async mealId => {\n        const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n        if(jwt == null){\n            throw Error('Expired Token')\n        }\n\n        try {\n            const response = await fetch(`http://localhost:3000/api/meals/${mealId}`, {\n                method:'DELETE',\n                mode: 'cors',\n                cache: \"no-cache\",\n                url: 'http://localhost:3000',\n                headers: {\n                    \"Authorization\": jwt\n                },\n            })\n            await throwError(response)\n        } catch(err) {\n            throw err;\n        }\n    }\n\n        export const updateUser = async (userId, user) => {\n            const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n            if(jwt == null){\n                throw Error('Expired Token')\n            }\n            try {\n                const updatedUser =  await fetch(`http://localhost:3000/api/users/${userId}`, {\n                    method:'PATCH',\n                    mode: 'cors',\n                    cache: \"no-cache\",\n                    url: 'http://localhost:3000',\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": jwt\n                    },\n                    body: JSON.stringify(user)\n                });\n                await throwError(updatedUser)\n                return updatedUser.json();\n            } catch(err) {\n                throw err;\n            }\n}"]},"metadata":{},"sourceType":"module"}