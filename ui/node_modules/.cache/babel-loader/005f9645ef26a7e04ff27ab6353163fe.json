{"ast":null,"code":"import _regeneratorRuntime from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/martinbrandt/martin-brandt/calorie-counter/src/pages/CalorieLogger.jsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  background-color: \", \";\\n  height: 70vh;\\n  margin: 30px;\\n  padding: 20px;\\n  overflow: auto;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport Header from 'components/Header';\nimport Table from 'components/Table';\nimport styled from 'styled-components';\nimport { lightGreen } from 'variables';\nimport { loadUserMeals, deleteMeal, saveNewMeal } from 'Api';\nimport { append, without, contains, filter, complement, concat, set, lensPath, keys, propEq, prepend, groupBy, prop } from 'ramda';\nimport Button from 'components/Button';\nimport TableItemGroup from 'components/TableItemGroup';\nimport moment from 'moment';\nimport Filter from 'components/Filter';\nvar Body = styled.div(_templateObject(), lightGreen);\nvar initialState = {\n  startTime: '00:00:00',\n  endTime: '23:59:59',\n  startDate: '1900-01-01',\n  endDate: '2090-01-01'\n};\nvar dateConstant = 'YYYY-MM-DD HH:mm:ss';\n\nvar convertStringToMoment = function convertStringToMoment(date) {\n  return moment(date, dateConstant).utc();\n};\n\nvar CalorieLogger =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CalorieLogger, _Component);\n\n  function CalorieLogger() {\n    var _this;\n\n    _classCallCheck(this, CalorieLogger);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalorieLogger).call(this));\n\n    _this.setFilter = function (filters) {\n      _this.setState(function (prevState) {\n        return set(lensPath(['filter']), filters, prevState);\n      });\n    };\n\n    _this.clearFilter = function () {\n      return _this.setFilter(initialState);\n    };\n\n    _this.filterMeals = function (meals) {\n      var filter = _this.state.filter;\n      var startDateTimeString = concat(concat(filter.startDate, ' '), filter.startTime);\n      var endDateTimeString = concat(concat(filter.endDate, ' '), filter.endTime);\n      var startDateTime = convertStringToMoment(startDateTimeString);\n      var endDateTime = convertStringToMoment(endDateTimeString);\n\n      var isInRange = function isInRange(dateTimeMoment) {\n        return startDateTime.isBefore(dateTimeMoment) && endDateTime.isAfter(dateTimeMoment);\n      };\n\n      return meals.filter(function (meal) {\n        return isInRange(convertStringToMoment(prop('created_dt', meal)));\n      });\n    };\n\n    _this.toggleEditing = function (id) {\n      contains(id, _this.state.editingIndexes) ? _this.setState(function (prevState) {\n        return {\n          editingIndexes: without(id, prevState.editingIndexes)\n        };\n      }) : _this.setState(function (prevState) {\n        return {\n          editingIndexes: append(id, prevState.editingIndexes)\n        };\n      });\n    };\n\n    _this.setMeals =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var mealResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return loadUserMeals();\n\n            case 2:\n              mealResponse = _context.sent;\n              _context.t0 = _this;\n              _context.next = 6;\n              return mealResponse.json();\n\n            case 6:\n              _context.t1 = _context.sent;\n              _context.t2 = {\n                meals: _context.t1\n              };\n\n              _context.t0.setState.call(_context.t0, _context.t2);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.saveMeal =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(meal) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return saveNewMeal(meal);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.deleteMeal =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(meal) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!meal.id) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return deleteMeal(meal.id);\n\n              case 3:\n                //remove meal from state\n                _this.setState(function (prevState) {\n                  return {\n                    meals: filter(complement(propEq)('id', meal.id), prevState.meals)\n                  };\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.setLoggedIn = function (user) {\n      return _this.setState({\n        user: user\n      });\n    };\n\n    _this.addNewMeal = function () {\n      _this.setState(function (prevState) {\n        return {\n          meals: prepend({\n            \"id\": 0,\n            \"created_dt\": moment().utc().format(dateConstant)\n          }, prevState.meals)\n        };\n      });\n\n      _this.toggleEditing(\"item-0-0\");\n    };\n\n    _this.state = {\n      loggedIn: sessionStorage.getItem('jwt') !== null,\n      meals: [],\n      editingIndexes: [],\n      filter: initialState,\n      user: {}\n    };\n    return _this;\n  }\n\n  _createClass(CalorieLogger, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.state.loggedIn) {\n        this.setMeals();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (!prevState.loggedIn && this.state.loggedIn) {\n        //load the meals\n        this.setMeals();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          meals = _this$state.meals,\n          editingIndexes = _this$state.editingIndexes,\n          filter = _this$state.filter,\n          user = _this$state.user;\n\n      var getDay = function getDay(date) {\n        return moment(date, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD');\n      };\n\n      var dayGroups = groupBy(function (meal) {\n        return getDay(prop('created_dt', meal));\n      })(this.filterMeals(meals));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Header, {\n        toggleSignUp: this.props.toggleSignUp,\n        setUserLoggedIn: this.setLoggedIn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"User Meals:\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Daily Calorie Intake: \"), React.createElement(\"input\", {\n        value: user.daily_calorie_count,\n        onChange: function onChange(_ref4) {\n          var target = _ref4.target;\n          return _this2.setState(function (prevState) {\n            return {\n              user: set(lensPath(['user', 'daily_calorie_count']), target.value, prevState)\n            };\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(Button, {\n        inverse: true,\n        value: \"Set Calories\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(Button, {\n        inverse: true,\n        value: \"add meal\",\n        onClick: this.addNewMeal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(Filter, {\n        clearFilter: this.clearFilter,\n        filter: filter,\n        setFilter: this.setFilter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, keys(dayGroups).map(function (date, idx) {\n        return React.createElement(TableItemGroup, {\n          key: \"group-\".concat(idx),\n          day: date,\n          meals: dayGroups[date],\n          toggleEditing: _this2.toggleEditing,\n          editingIndexes: editingIndexes,\n          idx: idx,\n          saveMeal: _this2.saveMeal,\n          deleteMeal: _this2.deleteMeal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        });\n      }))));\n    }\n  }]);\n\n  return CalorieLogger;\n}(Component);\n\nexport default CalorieLogger;","map":{"version":3,"sources":["/Users/martinbrandt/martin-brandt/calorie-counter/src/pages/CalorieLogger.jsx"],"names":["React","Component","Header","Table","styled","lightGreen","loadUserMeals","deleteMeal","saveNewMeal","append","without","contains","filter","complement","concat","set","lensPath","keys","propEq","prepend","groupBy","prop","Button","TableItemGroup","moment","Filter","Body","div","initialState","startTime","endTime","startDate","endDate","dateConstant","convertStringToMoment","date","utc","CalorieLogger","setFilter","filters","setState","prevState","clearFilter","filterMeals","meals","state","startDateTimeString","endDateTimeString","startDateTime","endDateTime","isInRange","dateTimeMoment","isBefore","isAfter","meal","toggleEditing","id","editingIndexes","setMeals","mealResponse","json","saveMeal","setLoggedIn","user","addNewMeal","format","loggedIn","sessionStorage","getItem","prevProps","getDay","dayGroups","props","toggleSignUp","daily_calorie_count","target","value","map","idx"],"mappings":"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","sourcesContent":["import React, {Component,} from 'react';\nimport Header from 'components/Header';\nimport Table from 'components/Table';\nimport styled from 'styled-components';\nimport {lightGreen} from 'variables';\nimport {loadUserMeals, deleteMeal, saveNewMeal} from 'Api';\nimport {append, without, contains, filter, complement, concat, set, lensPath, keys, propEq, prepend, groupBy, prop} from 'ramda';\nimport Button from 'components/Button';\nimport TableItemGroup from 'components/TableItemGroup';\nimport moment from 'moment';\nimport Filter from 'components/Filter';\n\nconst Body = styled.div`\n  background-color: ${lightGreen};\n  height: 70vh;\n  margin: 30px;\n  padding: 20px;\n  overflow: auto;\n`;\n\nconst initialState = {\n    startTime: '00:00:00',\n    endTime: '23:59:59',\n    startDate: '1900-01-01',\n    endDate: '2090-01-01'\n}\n\nconst dateConstant = 'YYYY-MM-DD HH:mm:ss'\n\nconst convertStringToMoment = date => moment(date, dateConstant).utc()\n\nclass CalorieLogger extends Component {\n    constructor() {\n        super();\n        this.state = {\n            loggedIn: sessionStorage.getItem('jwt') !== null,\n            meals:[],\n            editingIndexes: [],\n            filter: initialState,\n            user: {}\n        }\n    }\n\n    componentDidMount(){\n        if(this.state.loggedIn){\n            this.setMeals();\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(!prevState.loggedIn && this.state.loggedIn){\n            //load the meals\n            this.setMeals();\n        }\n    }\n\n    setFilter = filters => {\n        this.setState(prevState => set(lensPath(['filter']), filters, prevState))\n    }\n\n    clearFilter = () => this.setFilter(initialState)\n\n    filterMeals = meals => {\n        const {filter} = this.state;\n\n        const startDateTimeString = concat(concat(filter.startDate,' '), filter.startTime);\n        const endDateTimeString = concat(concat(filter.endDate,' '), filter.endTime);\n\n        const startDateTime = convertStringToMoment(startDateTimeString);\n        const endDateTime = convertStringToMoment(endDateTimeString);\n        \n        const isInRange = dateTimeMoment => startDateTime.isBefore(dateTimeMoment) && endDateTime.isAfter(dateTimeMoment)\n        \n        return meals.filter(meal => isInRange(convertStringToMoment(prop('created_dt', meal))));\n\n    }\n\n    toggleEditing = id => {\n        contains(id, this.state.editingIndexes) ? \n        this.setState(prevState => ({editingIndexes: without(id, prevState.editingIndexes)})) :\n        this.setState(prevState => ({editingIndexes: append(id, prevState.editingIndexes)}))\n    }\n\n    setMeals = async () => {\n        const mealResponse = await loadUserMeals();\n        this.setState({meals: await mealResponse.json()});\n    }\n\n    saveMeal = async meal => {\n        await saveNewMeal(meal)\n    }\n\n    deleteMeal = async meal => {\n        \n        if(meal.id) {\n            await deleteMeal(meal.id)\n        }\n        //remove meal from state\n        this.setState(prevState => ({meals: filter(complement(propEq)('id', meal.id), prevState.meals)}));\n    }\n\n    setLoggedIn = user => this.setState({user:user});\n\n    addNewMeal= () => {\n        this.setState(prevState => ({meals: prepend({\"id\":0, \"created_dt\": moment().utc().format(dateConstant)}, prevState.meals)}));\n        this.toggleEditing(\"item-0-0\");\n    }\n\n\n    render(){\n        const {meals, editingIndexes, filter, user} = this.state;\n\n        const getDay = date => moment(date, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD')\n\n        const dayGroups = groupBy(meal => getDay(prop('created_dt', meal)))(this.filterMeals(meals));\n        \n        return <div>\n                    <Header toggleSignUp={this.props.toggleSignUp} setUserLoggedIn={this.setLoggedIn}/>\n                    <Body>\n                        <h3>User Meals:</h3>\n                        <label>Daily Calorie Intake: </label>\n                        <input \n                            value={user.daily_calorie_count} \n                            onChange={({target}) => \n                                this.setState(prevState => ({user: set(lensPath(['user', 'daily_calorie_count']), target.value, prevState)}))\n                            }\n                        />\n                        <Button inverse value='Set Calories'/>\n                        <Button inverse value='add meal' onClick={this.addNewMeal}/>\n                        <Filter clearFilter={this.clearFilter} filter={filter} setFilter={this.setFilter}/>\n                        <Table >{keys(dayGroups).map((date, idx) => \n                            <TableItemGroup \n                                key={`group-${idx}`}\n                                day={date}\n                                meals={dayGroups[date]}\n                                toggleEditing={this.toggleEditing}\n                                editingIndexes={editingIndexes} \n                                idx={idx}\n                                saveMeal={this.saveMeal}\n                                deleteMeal={this.deleteMeal}\n                            />\n                        )}</Table>\n        \n                    </Body>\n               \n               </div>\n    }\n}\n\n\nexport default CalorieLogger;\n"]},"metadata":{},"sourceType":"module"}