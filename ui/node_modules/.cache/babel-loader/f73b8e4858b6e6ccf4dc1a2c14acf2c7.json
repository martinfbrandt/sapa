{"ast":null,"code":"import { assoc, propOr } from 'ramda';\n\nvar unauthorizedClearSession = function unauthorizedClearSession() {\n  if (err.code == '401') {\n    sessionStorage.clear();\n  }\n};\n\nexport var signUpUser = function signUpUser(user) {\n  try {\n    return fetch('http://localhost:3000/api/signup', {\n      method: 'POST',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(assoc('roles', ['user'], user))\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};\nexport var logInUser = function logInUser(user) {\n  try {\n    return fetch('http://localhost:3000/api/login', {\n      method: 'POST',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(user)\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};\nexport var loadUserMeals = function loadUserMeals(user) {\n  try {\n    return fetch('http://localhost:3000/api/meals', {\n      method: 'GET',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": propOr(null, 'jwt', sessionStorage.getItem('user'))\n      }\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};\nexport var saveNewMeal = function saveNewMeal(meal) {\n  try {\n    return fetch('http://localhost:3000/api/meals', {\n      method: 'POST',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": propOr(null, 'jwt', sessionStorage.getItem('user'))\n      },\n      body: JSON.stringify(meal)\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};\nexport var deleteMeal = function deleteMeal(mealId) {\n  try {\n    return fetch(\"http://localhost:3000/api/meals/\".concat(mealId), {\n      method: 'DELETE',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Authorization\": propOr(null, 'jwt', sessionStorage.getItem('user'))\n      }\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};\nexport var updateUser = function updateUser(userId, user) {\n  try {\n    return fetch(\"http://localhost:3000/api/users/\".concat(userId), {\n      method: 'PATCH',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": propOr(null, 'jwt', sessionStorage.getItem('user'))\n      },\n      body: JSON.stringify(user)\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};","map":{"version":3,"sources":["/Users/martinbrandt/martin-brandt/calorie-counter/src/Api.js"],"names":["assoc","propOr","unauthorizedClearSession","err","code","sessionStorage","clear","signUpUser","user","fetch","method","mode","cache","url","headers","body","JSON","stringify","Error","logInUser","loadUserMeals","getItem","saveNewMeal","meal","deleteMeal","mealId","updateUser","userId"],"mappings":"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","sourcesContent":["import {assoc, propOr} from 'ramda';\n\n\nconst unauthorizedClearSession = () => {\n    if(err.code == '401'){\n        sessionStorage.clear();\n    }\n}\nexport const signUpUser = user => {\n    try {\n        return fetch('http://localhost:3000/api/signup', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(assoc('roles', ['user'], user))\n        })\n    } catch(err) {\n        throw Error(err);\n    }\n}\n\nexport const logInUser = user => {\n    try {\n        return fetch('http://localhost:3000/api/login', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(user)\n        })\n    } catch(err) {\n        throw Error(err);\n    }\n}\n\n\nexport const loadUserMeals = user => {\n    try {\n        return fetch('http://localhost:3000/api/meals', {\n            method:'GET',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": propOr(null, 'jwt', sessionStorage.getItem('user'))\n            },\n        })\n    } catch(err) {\n        throw Error(err);\n    }\n}\n\nexport const saveNewMeal = meal => {\n    try {\n        return fetch('http://localhost:3000/api/meals', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": propOr(null, 'jwt', sessionStorage.getItem('user'))\n            },\n            body: JSON.stringify(meal)\n        })\n    } catch(err) {\n        throw Error(err);\n    }\n}\n\n    export const deleteMeal = mealId => {\n        try {\n            return fetch(`http://localhost:3000/api/meals/${mealId}`, {\n                method:'DELETE',\n                mode: 'cors',\n                cache: \"no-cache\",\n                url: 'http://localhost:3000',\n                headers: {\n                    \"Authorization\": propOr(null, 'jwt', sessionStorage.getItem('user'))\n                },\n            })\n        } catch(err) {\n            throw Error(err);\n        }\n    }\n\n        export const updateUser = (userId, user) => {\n            try {\n                return fetch(`http://localhost:3000/api/users/${userId}`, {\n                    method:'PATCH',\n                    mode: 'cors',\n                    cache: \"no-cache\",\n                    url: 'http://localhost:3000',\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": propOr(null, 'jwt', sessionStorage.getItem('user'))\n                    },\n                    body: JSON.stringify(user)\n                })\n            } catch(err) {\n                throw Error(err);\n            }\n}"]},"metadata":{},"sourceType":"module"}