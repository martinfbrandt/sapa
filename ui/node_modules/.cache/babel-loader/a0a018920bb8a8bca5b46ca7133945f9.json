{"ast":null,"code":"import _regeneratorRuntime from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/martinbrandt/martin-brandt/calorie-counter/src/pages/CalorieLogger.jsx\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    border:none;\\n    height:30px;\\n    font-size: 14px;\\n    margin: 5px;\\n    padding:5px;\\n    text-align: center;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  background-color: \", \";\\n  height: 60px;\\n  display:flex;\\n  flex-direction:row;\\n  margin: 30px;\\n  align-items: center;\\n  justify-content: center\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  background-color: \", \";\\n  height: calc(100vh - \", \" - 20px) ;\\n  padding: 20px;\\n  overflow: auto;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport Header from 'components/Header';\nimport Table from 'components/Table';\nimport styled from 'styled-components';\nimport { lightGreen } from 'variables';\nimport { loadUserMeals, deleteMeal, loadUser, saveNewMeal, updateMeal, updateUser } from 'Api';\nimport { append, without, equals, isEmpty, contains, filter, complement, concat, set, lensPath, keys, propEq, prepend, groupBy, prop } from 'ramda';\nimport Button from 'components/Button';\nimport TableItemGroup from 'components/TableItemGroup';\nimport moment from 'moment';\nimport Filter from 'components/Filter';\nimport { headerHeight } from 'variables';\nvar Body = styled.div(_templateObject(), lightGreen, headerHeight);\nvar ControlPanel = styled.div(_templateObject2(), lightGreen);\nvar StyledInput = styled.input(_templateObject3());\nvar initialFilterState = {\n  startTime: '00:00:00',\n  endTime: '23:59:59',\n  startDate: '1900-01-01',\n  endDate: '2090-01-01'\n};\nvar dateConstant = 'YYYY-MM-DD HH:mm:ss';\n\nvar convertStringToMoment = function convertStringToMoment(date) {\n  return moment(date, dateConstant).utc();\n};\n\nvar initialState = {\n  meals: [],\n  editingIndexes: [],\n  filter: initialFilterState,\n  user: JSON.parse(sessionStorage.getItem('user')) || {}\n};\n\nvar CalorieLogger =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CalorieLogger, _Component);\n\n  function CalorieLogger() {\n    var _this;\n\n    _classCallCheck(this, CalorieLogger);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalorieLogger).call(this));\n\n    _this.setFilter = function (filters) {\n      _this.setState(function (prevState) {\n        return set(lensPath(['filter']), filters, prevState);\n      });\n    };\n\n    _this.clearFilter = function () {\n      return _this.setFilter(initialFilterState);\n    };\n\n    _this.filterMeals = function (meals) {\n      var filter = _this.state.filter;\n      var startDateTimeString = concat(concat(filter.startDate, ' '), filter.startTime);\n      var endDateTimeString = concat(concat(filter.endDate, ' '), filter.endTime);\n      var startDateTime = convertStringToMoment(startDateTimeString);\n      var endDateTime = convertStringToMoment(endDateTimeString);\n\n      var isInRange = function isInRange(dateTimeMoment) {\n        return startDateTime.isBefore(dateTimeMoment) && endDateTime.isAfter(dateTimeMoment);\n      };\n\n      return meals.filter(function (meal) {\n        return isInRange(convertStringToMoment(prop('created_dt', meal)));\n      });\n    };\n\n    _this.toggleEditing = function (id) {\n      contains(id, _this.state.editingIndexes) ? _this.setState(function (prevState) {\n        return {\n          editingIndexes: without(id, prevState.editingIndexes)\n        };\n      }) : _this.setState(function (prevState) {\n        return {\n          editingIndexes: append(id, prevState.editingIndexes)\n        };\n      });\n    };\n\n    _this.loadInitialState =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var user, loadedUser, meals;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              user = _this.state.user;\n              _context.prev = 1;\n              _context.next = 4;\n              return loadUser(user.id);\n\n            case 4:\n              loadedUser = _context.sent;\n              _context.next = 7;\n              return loadUserMeals();\n\n            case 7:\n              meals = _context.sent;\n\n              _this.setState({\n                user: loadedUser,\n                meals: meals\n              });\n\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n              if (_context.t0.message === 'Expired Token') {\n                _this.setState({\n                  user: {}\n                });\n              }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n    _this.getMeals =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var meals;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return loadUserMeals();\n\n            case 2:\n              meals = _context2.sent;\n\n              _this.setState({\n                meals: meals\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.logout = function () {\n      sessionStorage.clear();\n\n      _this.setState(initialState);\n    };\n\n    _this.saveMeal =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(meal) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return saveNewMeal(meal);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.updateMeal =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(mealId, meal) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return updateMeal(mealId, meal);\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.deleteMeal =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(meal) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!meal.id) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return deleteMeal(meal.id);\n\n              case 3:\n                //remove meal from state\n                _this.setState(function (prevState) {\n                  return {\n                    meals: filter(complement(propEq)('id', meal.id), prevState.meals)\n                  };\n                });\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.setLoggedIn = function (user) {\n      return _this.setState({\n        user: user\n      });\n    };\n\n    _this.addNewMeal = function () {\n      _this.setState(function (prevState) {\n        return {\n          meals: prepend({\n            \"id\": 0,\n            \"created_dt\": moment().utc().format(dateConstant)\n          }, prevState.meals)\n        };\n      });\n\n      _this.toggleEditing(\"item-0-0\");\n    };\n\n    _this.state = initialState;\n    return _this;\n  }\n\n  _createClass(CalorieLogger, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!isEmpty(this.state.user)) {\n        this.loadInitialState();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (!equals(prevState.user, this.state.user)) {\n        //load the meals\n        this.getMeals();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          meals = _this$state.meals,\n          editingIndexes = _this$state.editingIndexes,\n          filter = _this$state.filter,\n          user = _this$state.user;\n\n      var getDay = function getDay(date) {\n        return moment(date, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD');\n      };\n\n      var dayGroups = groupBy(function (meal) {\n        return getDay(prop('created_dt', meal));\n      })(this.filterMeals(meals));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(Header, {\n        logout: this.logout,\n        toggleSignUp: this.props.toggleSignUp,\n        setUserLoggedIn: this.setLoggedIn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), React.createElement(Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"User Meals:\"), React.createElement(ControlPanel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Daily Calorie Intake: \"), React.createElement(StyledInput, {\n        value: user.daily_calorie_count,\n        onChange: function onChange(_ref6) {\n          var target = _ref6.target;\n          return _this2.setState(function (prevState) {\n            return {\n              user: set(lensPath(['daily_calorie_count']), target.value, prevState.user)\n            };\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(Button, {\n        inverse: true,\n        value: \"Set Calories\",\n        onClick:\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee6() {\n          var updatedUser;\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.next = 2;\n                  return updateUser(user.id, {\n                    daily_calorie_count: parseInt(_this2.state.user.daily_calorie_count)\n                  });\n\n                case 2:\n                  updatedUser = _context6.sent;\n\n                  _this2.setState({\n                    user: updatedUser\n                  });\n\n                case 4:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), React.createElement(Button, {\n        inverse: true,\n        value: \"add meal\",\n        onClick: this.addNewMeal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      })), React.createElement(Filter, {\n        clearFilter: this.clearFilter,\n        filter: filter,\n        setFilter: this.setFilter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }), React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, keys(dayGroups).map(function (date, idx) {\n        return React.createElement(TableItemGroup, {\n          key: \"group-\".concat(idx),\n          calorieMax: _this2.state.user.daily_calorie_count,\n          day: date,\n          meals: dayGroups[date],\n          toggleEditing: _this2.toggleEditing,\n          editingIndexes: editingIndexes,\n          idx: idx,\n          saveMeal: _this2.saveMeal,\n          updateMeal: _this2.updateMeal,\n          deleteMeal: _this2.deleteMeal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        });\n      }))));\n    }\n  }]);\n\n  return CalorieLogger;\n}(Component);\n\nexport default CalorieLogger;","map":{"version":3,"sources":["/Users/martinbrandt/martin-brandt/calorie-counter/src/pages/CalorieLogger.jsx"],"names":["React","Component","Header","Table","styled","lightGreen","loadUserMeals","deleteMeal","loadUser","saveNewMeal","updateMeal","updateUser","append","without","equals","isEmpty","contains","filter","complement","concat","set","lensPath","keys","propEq","prepend","groupBy","prop","Button","TableItemGroup","moment","Filter","headerHeight","Body","div","ControlPanel","StyledInput","input","initialFilterState","startTime","endTime","startDate","endDate","dateConstant","convertStringToMoment","date","utc","initialState","meals","editingIndexes","user","JSON","parse","sessionStorage","getItem","CalorieLogger","setFilter","filters","setState","prevState","clearFilter","filterMeals","state","startDateTimeString","endDateTimeString","startDateTime","endDateTime","isInRange","dateTimeMoment","isBefore","isAfter","meal","toggleEditing","id","loadInitialState","loadedUser","message","getMeals","logout","clear","saveMeal","mealId","setLoggedIn","addNewMeal","format","prevProps","getDay","dayGroups","props","toggleSignUp","daily_calorie_count","target","value","parseInt","updatedUser","map","idx"],"mappings":"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","sourcesContent":["import React, {Component,} from 'react';\nimport Header from 'components/Header';\nimport Table from 'components/Table';\nimport styled from 'styled-components';\nimport {lightGreen} from 'variables';\nimport {loadUserMeals, deleteMeal, loadUser, saveNewMeal, updateMeal, updateUser} from 'Api';\nimport {append, without, equals, isEmpty, contains, filter, complement, concat, set, lensPath, keys, propEq, prepend, groupBy, prop} from 'ramda';\nimport Button from 'components/Button';\nimport TableItemGroup from 'components/TableItemGroup';\nimport moment from 'moment';\nimport Filter from 'components/Filter';\nimport {headerHeight} from 'variables';\n\nconst Body = styled.div`\n  background-color: ${lightGreen};\n  height: calc(100vh - ${headerHeight} - 20px) ;\n  padding: 20px;\n  overflow: auto;\n`;\n\nconst ControlPanel = styled.div`\n  background-color: ${lightGreen};\n  height: 60px;\n  display:flex;\n  flex-direction:row;\n  margin: 30px;\n  align-items: center;\n  justify-content: center\n`;\n\nconst StyledInput = styled.input`\n    border:none;\n    height:30px;\n    font-size: 14px;\n    margin: 5px;\n    padding:5px;\n    text-align: center;\n`\n\nconst initialFilterState = {\n    startTime: '00:00:00',\n    endTime: '23:59:59',\n    startDate: '1900-01-01',\n    endDate: '2090-01-01'\n}\n\nconst dateConstant = 'YYYY-MM-DD HH:mm:ss'\n\nconst convertStringToMoment = date => moment(date, dateConstant).utc()\n\nconst initialState = {\n    meals:[],\n    editingIndexes: [],\n    filter: initialFilterState,\n    user: JSON.parse(sessionStorage.getItem('user')) || {},\n};\n\nclass CalorieLogger extends Component {\n    constructor() {\n        super();\n        this.state = initialState;\n    }\n\n    componentDidMount(){\n        if(!isEmpty(this.state.user)){\n            this.loadInitialState();\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(!equals(prevState.user, this.state.user)){\n            //load the meals\n            this.getMeals();\n            \n        }\n    }\n\n    setFilter = filters => {\n        this.setState(prevState => set(lensPath(['filter']), filters, prevState))\n    }\n\n    clearFilter = () => this.setFilter(initialFilterState)\n\n    filterMeals = meals => {\n        const {filter} = this.state;\n        const startDateTimeString = concat(concat(filter.startDate,' '), filter.startTime);\n        const endDateTimeString = concat(concat(filter.endDate,' '), filter.endTime);\n\n        const startDateTime = convertStringToMoment(startDateTimeString);\n        const endDateTime = convertStringToMoment(endDateTimeString);\n        \n        const isInRange = dateTimeMoment => startDateTime.isBefore(dateTimeMoment) && endDateTime.isAfter(dateTimeMoment)\n        \n        return meals.filter(meal => isInRange(convertStringToMoment(prop('created_dt', meal))));\n\n    }\n\n    toggleEditing = id => {\n        contains(id, this.state.editingIndexes) ? \n        this.setState(prevState => ({editingIndexes: without(id, prevState.editingIndexes)})) :\n        this.setState(prevState => ({editingIndexes: append(id, prevState.editingIndexes)}))\n    }\n\n    loadInitialState = async () => {\n        const {user} = this.state;\n        try {\n            const loadedUser = await loadUser(user.id);\n            const meals = await loadUserMeals();\n\n            this.setState({user: loadedUser, meals: meals});\n        } catch (err){\n            if(err.message === 'Expired Token'){\n                this.setState({user: {}})\n            }\n        }\n    }\n\n    getMeals = async () => {\n        const meals = await loadUserMeals();\n        this.setState({meals: meals});\n    }\n\n    logout = () => {\n        sessionStorage.clear();\n        this.setState(initialState)\n    }\n\n    saveMeal = async meal => {\n        await saveNewMeal(meal)\n    }\n\n    updateMeal = async (mealId, meal) => await updateMeal(mealId, meal)\n\n    deleteMeal = async meal => {\n        \n        if(meal.id) {\n            await deleteMeal(meal.id)\n        }\n        //remove meal from state\n        this.setState(prevState => ({meals: filter(complement(propEq)('id', meal.id), prevState.meals)}));\n    }\n\n    setLoggedIn = user => this.setState({user:user});\n\n    addNewMeal= () => {\n        this.setState(prevState => ({meals: prepend({\"id\":0, \"created_dt\": moment().utc().format(dateConstant)}, prevState.meals)}));\n        this.toggleEditing(\"item-0-0\");\n    }\n\n\n    render(){\n        const {meals, editingIndexes, filter, user} = this.state;\n\n        const getDay = date => moment(date, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD')\n\n        const dayGroups = groupBy(meal => getDay(prop('created_dt', meal)))(this.filterMeals(meals));\n        \n        return <div>\n                    <Header logout={this.logout} toggleSignUp={this.props.toggleSignUp} setUserLoggedIn={this.setLoggedIn}/>\n                    <Body>\n                        <h3>User Meals:</h3>\n                        <ControlPanel>\n                            <label>Daily Calorie Intake: </label>\n                            <StyledInput \n                                value={user.daily_calorie_count} \n                                onChange={({target}) => \n                                    this.setState(prevState => ({user: set(lensPath(['daily_calorie_count']), target.value, prevState.user)}))\n                                }\n                            />\n                            <Button inverse value='Set Calories' onClick={async () => {\n                                        const updatedUser = await updateUser(user.id, {daily_calorie_count: parseInt(this.state.user.daily_calorie_count)});\n                                        this.setState({user: updatedUser});\n                                    }\n                                }/>\n                            <Button inverse value='add meal' onClick={this.addNewMeal}/>\n                        </ControlPanel>\n\n                        <Filter clearFilter={this.clearFilter} filter={filter} setFilter={this.setFilter}/>\n                        <Table >{keys(dayGroups).map((date, idx) => \n                            <TableItemGroup \n                                key={`group-${idx}`}\n                                calorieMax={this.state.user.daily_calorie_count}\n                                day={date}\n                                meals={dayGroups[date]}\n                                toggleEditing={this.toggleEditing}\n                                editingIndexes={editingIndexes} \n                                idx={idx}\n                                saveMeal={this.saveMeal}\n                                updateMeal={this.updateMeal}\n                                deleteMeal={this.deleteMeal}\n                            />\n                        )}</Table>\n        \n                    </Body>\n               \n               </div>\n    }\n}\n\n\nexport default CalorieLogger;\n"]},"metadata":{},"sourceType":"module"}