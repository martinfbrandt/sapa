{"ast":null,"code":"import _regeneratorRuntime from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { assoc, propOr } from 'ramda';\n\nvar unauthorizedClearSession = function unauthorizedClearSession(response) {\n  if (response.status == 401) {\n    sessionStorage.clear();\n    return true;\n  }\n\n  return false;\n};\n\nexport var signUpUser = function signUpUser(user) {\n  try {\n    return fetch('http://localhost:3000/api/signup', {\n      method: 'POST',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(assoc('roles', ['user'], user))\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};\nexport var logInUser = function logInUser(user) {\n  try {\n    return fetch('http://localhost:3000/api/login', {\n      method: 'POST',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(user)\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};\nexport var loadUserMeals =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(user) {\n    var mealResponse;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch('http://localhost:3000/api/meals', {\n              method: 'GET',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n              }\n            });\n\n          case 3:\n            mealResponse = _context.sent;\n\n            if (!unauthorizedClearSession(mealResponse)) {\n              _context.next = 6;\n              break;\n            }\n\n            throw 'Expired Token';\n\n          case 6:\n            return _context.abrupt(\"return\", mealResponse.json());\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            throw Error(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 9]]);\n  }));\n\n  return function loadUserMeals(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var saveNewMeal = function saveNewMeal(meal) {\n  try {\n    return fetch('http://localhost:3000/api/meals', {\n      method: 'POST',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n      },\n      body: JSON.stringify(meal)\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};\nexport var deleteMeal = function deleteMeal(mealId) {\n  try {\n    return fetch(\"http://localhost:3000/api/meals/\".concat(mealId), {\n      method: 'DELETE',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Authorization\": propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n      }\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};\nexport var updateUser = function updateUser(userId, user) {\n  try {\n    return fetch(\"http://localhost:3000/api/users/\".concat(userId), {\n      method: 'PATCH',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n      },\n      body: JSON.stringify(user)\n    });\n  } catch (err) {\n    throw Error(err);\n  }\n};","map":{"version":3,"sources":["/Users/martinbrandt/martin-brandt/calorie-counter/src/Api.js"],"names":["assoc","propOr","unauthorizedClearSession","response","status","sessionStorage","clear","signUpUser","user","fetch","method","mode","cache","url","headers","body","JSON","stringify","err","Error","logInUser","loadUserMeals","parse","getItem","mealResponse","json","saveNewMeal","meal","deleteMeal","mealId","updateUser","userId"],"mappings":"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","sourcesContent":["import {assoc, propOr} from 'ramda';\n\n\nconst unauthorizedClearSession = response => {\n    if(response.status == 401){\n        sessionStorage.clear();\n        return true;\n    }\n    return false;\n}\nexport const signUpUser = user => {\n    try {\n        return fetch('http://localhost:3000/api/signup', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(assoc('roles', ['user'], user))\n        })\n    } catch(err) {\n        throw Error(err);\n    }\n}\n\nexport const logInUser = user => {\n    try {\n        return fetch('http://localhost:3000/api/login', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(user)\n        })\n    } catch(err) {\n        throw Error(err);\n    }\n}\n\n\nexport const loadUserMeals = async user => {\n    try {\n        const mealResponse = await fetch('http://localhost:3000/api/meals', {\n            method:'GET',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n            },\n        })\n        if(unauthorizedClearSession(mealResponse)){\n            throw 'Expired Token'\n        }\n        return mealResponse.json();\n    } catch(err) {\n        throw Error(err);\n    }\n}\n\nexport const saveNewMeal = meal => {\n    try {\n        return fetch('http://localhost:3000/api/meals', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n            },\n            body: JSON.stringify(meal)\n        })\n    } catch(err) {\n        throw Error(err);\n    }\n}\n\n    export const deleteMeal = mealId => {\n        try {\n            return fetch(`http://localhost:3000/api/meals/${mealId}`, {\n                method:'DELETE',\n                mode: 'cors',\n                cache: \"no-cache\",\n                url: 'http://localhost:3000',\n                headers: {\n                    \"Authorization\": propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n                },\n            })\n        } catch(err) {\n            throw Error(err);\n        }\n    }\n\n        export const updateUser = (userId, user) => {\n            try {\n                return fetch(`http://localhost:3000/api/users/${userId}`, {\n                    method:'PATCH',\n                    mode: 'cors',\n                    cache: \"no-cache\",\n                    url: 'http://localhost:3000',\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n                    },\n                    body: JSON.stringify(user)\n                })\n            } catch(err) {\n                throw Error(err);\n            }\n}"]},"metadata":{},"sourceType":"module"}