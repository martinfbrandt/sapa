{"ast":null,"code":"import _regeneratorRuntime from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/martinbrandt/martin-brandt/calorie-counter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { assoc, propOr } from 'ramda'; // checks for error on api call and returns it to be displayed\n\nvar throwError =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(response) {\n    var errBody;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(response.status !== 200)) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 3;\n            return response.json();\n\n          case 3:\n            errBody = _context.sent;\n            throw Error(errBody.error);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function throwError(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar unauthorizedClearSession = function unauthorizedClearSession(response) {\n  if (response.status === 401) {\n    sessionStorage.clear();\n    return true;\n  }\n\n  return false;\n};\n\nexport var signUpUser =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(user) {\n    var created;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return fetch('http://localhost:3000/api/signup', {\n              method: 'POST',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(assoc('roles', ['user'], user))\n            });\n\n          case 3:\n            created = _context2.sent;\n\n            if (!(created.status === 409)) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw Error(\"User with email address \".concat(user.email, \" exists\"));\n\n          case 6:\n            _context2.next = 8;\n            return throwError(created);\n\n          case 8:\n            return _context2.abrupt(\"return\", created.json());\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](0);\n            throw _context2.t0;\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 11]]);\n  }));\n\n  return function signUpUser(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadUser =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(userId) {\n    var jwt, fetchedUser;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n            if (!(jwt === null)) {\n              _context3.next = 3;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 3:\n            _context3.prev = 3;\n            _context3.next = 6;\n            return fetch(\"http://localhost:3000/api/users/\".concat(userId), {\n              method: 'GET',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n              }\n            });\n\n          case 6:\n            fetchedUser = _context3.sent;\n            return _context3.abrupt(\"return\", fetchedUser.json());\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](3);\n            throw _context3.t0;\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[3, 10]]);\n  }));\n\n  return function loadUser(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var logInUser =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(user) {\n    var loggedInUser;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return fetch('http://localhost:3000/api/login', {\n              method: 'POST',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(user)\n            });\n\n          case 3:\n            loggedInUser = _context4.sent;\n            _context4.next = 6;\n            return throwError(loggedInUser);\n\n          case 6:\n            return _context4.abrupt(\"return\", loggedInUser.json());\n\n          case 9:\n            _context4.prev = 9;\n            _context4.t0 = _context4[\"catch\"](0);\n            throw _context4.t0;\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 9]]);\n  }));\n\n  return function logInUser(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var loadUserMeals =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5() {\n    var jwt, mealResponse;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n            if (!(jwt === null)) {\n              _context5.next = 3;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 3:\n            _context5.prev = 3;\n            _context5.next = 6;\n            return fetch('http://localhost:3000/api/meals', {\n              method: 'GET',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n              }\n            });\n\n          case 6:\n            mealResponse = _context5.sent;\n\n            if (!unauthorizedClearSession(mealResponse)) {\n              _context5.next = 9;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 9:\n            return _context5.abrupt(\"return\", mealResponse.json());\n\n          case 12:\n            _context5.prev = 12;\n            _context5.t0 = _context5[\"catch\"](3);\n            throw _context5.t0;\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[3, 12]]);\n  }));\n\n  return function loadUserMeals() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var saveNewMeal =\n/*#__PURE__*/\nfunction () {\n  var _ref6 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(meal) {\n    var jwt, newMeal;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n            if (!(jwt == null)) {\n              _context6.next = 3;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 3:\n            _context6.prev = 3;\n            _context6.next = 6;\n            return fetch('http://localhost:3000/api/meals', {\n              method: 'POST',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n              },\n              body: JSON.stringify(meal)\n            });\n\n          case 6:\n            newMeal = _context6.sent;\n            return _context6.abrupt(\"return\", newMeal.json());\n\n          case 10:\n            _context6.prev = 10;\n            _context6.t0 = _context6[\"catch\"](3);\n            throw _context6.t0;\n\n          case 13:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[3, 10]]);\n  }));\n\n  return function saveNewMeal(_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var updateMeal =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee7(mealId, meal) {\n    var jwt, updatedMeal;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n            if (!(jwt === null)) {\n              _context7.next = 3;\n              break;\n            }\n\n            throw Error('Expired Token');\n\n          case 3:\n            _context7.prev = 3;\n            _context7.next = 6;\n            return fetch(\"http://localhost:3000/api/meals/\".concat(mealId), {\n              method: 'PATCH',\n              mode: 'cors',\n              cache: \"no-cache\",\n              url: 'http://localhost:3000',\n              headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n              },\n              body: JSON.stringify(meal)\n            });\n\n          case 6:\n            updatedMeal = _context7.sent;\n            return _context7.abrupt(\"return\", updatedMeal.json());\n\n          case 10:\n            _context7.prev = 10;\n            _context7.t0 = _context7[\"catch\"](3);\n            throw _context7.t0;\n\n          case 13:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[3, 10]]);\n  }));\n\n  return function updateMeal(_x6, _x7) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var deleteMeal = function deleteMeal(mealId) {\n  var jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n  if (jwt == null) {\n    throw Error('Expired Token');\n  }\n\n  try {\n    return fetch(\"http://localhost:3000/api/meals/\".concat(mealId), {\n      method: 'DELETE',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Authorization\": jwt\n      }\n    });\n  } catch (err) {\n    throw err;\n  }\n};\nexport var updateUser = function updateUser(userId, user) {\n  var jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')));\n\n  if (jwt == null) {\n    throw Error('Expired Token');\n  }\n\n  try {\n    return fetch(\"http://localhost:3000/api/users/\".concat(userId), {\n      method: 'PATCH',\n      mode: 'cors',\n      cache: \"no-cache\",\n      url: 'http://localhost:3000',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": jwt\n      },\n      body: JSON.stringify(user)\n    });\n  } catch (err) {\n    throw err;\n  }\n};","map":{"version":3,"sources":["/Users/martinbrandt/martin-brandt/calorie-counter/src/Api.js"],"names":["assoc","propOr","throwError","response","status","json","errBody","Error","error","unauthorizedClearSession","sessionStorage","clear","signUpUser","user","fetch","method","mode","cache","url","headers","body","JSON","stringify","created","email","loadUser","userId","jwt","parse","getItem","fetchedUser","logInUser","loggedInUser","loadUserMeals","mealResponse","saveNewMeal","meal","newMeal","updateMeal","mealId","updatedMeal","deleteMeal","err","updateUser"],"mappings":"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","sourcesContent":["import {assoc, propOr} from 'ramda';\n\n// checks for error on api call and returns it to be displayed\nconst throwError = async response => {\n    if(response.status !== 200){\n        const errBody = await response.json();\n        throw Error(errBody.error)\n    }\n}\n\n\nconst unauthorizedClearSession = response => {\n    if(response.status === 401){\n        sessionStorage.clear();\n        return true;\n    }\n    return false;\n}\nexport const signUpUser = async user => {\n    try {\n        const created = await fetch('http://localhost:3000/api/signup', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(assoc('roles', ['user'], user))\n        })\n\n        if(created.status === 409){\n            throw Error(`User with email address ${user.email} exists`)\n        } \n\n        await throwError(created)\n        return created.json();\n        \n    } catch(err) {\n        throw err;\n    }\n}\n\nexport const loadUser = async userId => {\n    const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n    if(jwt === null){\n        throw Error('Expired Token')\n    }\n    try {\n        const fetchedUser = await fetch(`http://localhost:3000/api/users/${userId}`, {\n            method:'GET',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt\n            },\n        })\n        return fetchedUser.json();\n    } catch(err) {\n        throw err;\n    }\n}\n\n\nexport const logInUser = async user => {\n    try {\n        const loggedInUser = await  fetch('http://localhost:3000/api/login', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(user)\n        });\n        await throwError(loggedInUser)\n        return loggedInUser.json();\n    } catch(err) {\n        throw err;\n    }\n}\n\n\nexport const loadUserMeals = async () => {\n    const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n    if(jwt === null){\n        throw Error('Expired Token')\n    }\n\n    try {\n        const mealResponse = await fetch('http://localhost:3000/api/meals', {\n            method:'GET',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\":jwt\n            },\n        })\n        if(unauthorizedClearSession(mealResponse)){\n            throw Error('Expired Token')\n        }\n        return mealResponse.json();\n    } catch(err) {\n        throw err;\n    }\n}\n\nexport const saveNewMeal = async meal => {\n    const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n    if(jwt == null){\n        throw Error('Expired Token')\n    }\n    try {\n        const newMeal = await fetch('http://localhost:3000/api/meals', {\n            method:'POST',\n            mode: 'cors',\n            cache: \"no-cache\",\n            url: 'http://localhost:3000',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": jwt \n            },\n            body: JSON.stringify(meal)\n        })\n        return newMeal.json();\n    } catch(err) {\n        throw err;\n    }\n}\n\n    export const updateMeal = async (mealId, meal) => {\n        const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n        if(jwt === null){\n            throw Error('Expired Token')\n        }\n\n        try {\n            const updatedMeal = await fetch(`http://localhost:3000/api/meals/${mealId}`, {\n                method:'PATCH',\n                mode: 'cors',\n                cache: \"no-cache\",\n                url: 'http://localhost:3000',\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": jwt\n                },\n                body: JSON.stringify(meal)\n            })\n            return updatedMeal.json();\n        } catch(err) {\n            throw err;\n        }\n    }\n\n    export const deleteMeal = mealId => {\n        const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n        if(jwt == null){\n            throw Error('Expired Token')\n        }\n\n        try {\n            return fetch(`http://localhost:3000/api/meals/${mealId}`, {\n                method:'DELETE',\n                mode: 'cors',\n                cache: \"no-cache\",\n                url: 'http://localhost:3000',\n                headers: {\n                    \"Authorization\": jwt\n                },\n            })\n        } catch(err) {\n            throw err;\n        }\n    }\n\n        export const updateUser = (userId, user) => {\n            const jwt = propOr(null, 'jwt', JSON.parse(sessionStorage.getItem('user')))\n            if(jwt == null){\n                throw Error('Expired Token')\n            }\n            try {\n                return fetch(`http://localhost:3000/api/users/${userId}`, {\n                    method:'PATCH',\n                    mode: 'cors',\n                    cache: \"no-cache\",\n                    url: 'http://localhost:3000',\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        \"Authorization\": jwt\n                    },\n                    body: JSON.stringify(user)\n                })\n            } catch(err) {\n                throw err;\n            }\n}"]},"metadata":{},"sourceType":"module"}