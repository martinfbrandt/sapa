{"ast":null,"code":"import _regeneratorRuntime from \"/Users/martinbrandt/sapa/ui/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/martinbrandt/sapa/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/martinbrandt/sapa/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/martinbrandt/sapa/ui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/martinbrandt/sapa/ui/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/martinbrandt/sapa/ui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/martinbrandt/sapa/ui/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/martinbrandt/sapa/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/martinbrandt/sapa/ui/src/pages/Sapa.jsx\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    border:none;\\n    height:30px;\\n    font-size: 14px;\\n    margin: 5px;\\n    padding:5px;\\n    text-align: center;\\n    background-color: \", \"\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  background-color: \", \";\\n  height: 60px;\\n  display:flex;\\n  flex-direction:row;\\n  margin: 30px;\\n  align-items: center;\\n  justify-content: center\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  background-color: \", \";\\n  height: calc(100vh - \", \" - 70px) ;\\n  margin: 30px 30px 0 30px;\\n  padding: 20px;\\n  overflow: auto;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport Header from 'components/Header';\nimport Table from 'components/Table';\nimport styled from 'styled-components';\nimport { lightGreen } from 'variables';\nimport { loadUserExperiences, deleteExperience, loadUser, saveNewExperience, updateExperience, updateUser } from 'Api';\nimport { append, prepend, without, sort, equals, isEmpty, contains, assoc, filter, complement, concat, set, lensPath, keys, propEq, groupBy, prop } from 'ramda';\nimport Button from 'components/Button';\nimport TableItemGroup from 'components/TableItemGroup';\nimport moment from 'moment';\nimport Filter from 'components/Filter';\nimport { headerHeight, inputGreen } from 'variables';\nvar Body = styled.div(_templateObject(), lightGreen, headerHeight);\nvar ControlPanel = styled.div(_templateObject2(), lightGreen);\nvar StyledInput = styled.input(_templateObject3(), inputGreen);\nvar initialFilterState = {\n  startTime: '00:00:00',\n  endTime: '23:59:59',\n  startDate: '1900-01-01',\n  endDate: '2090-01-01'\n};\nvar isNotEmpty = complement(isEmpty);\nvar dateConstant = 'YYYY-MM-DD HH:mm:ss';\n\nvar convertStringToMoment = function convertStringToMoment(date) {\n  return moment(date, dateConstant).utc();\n};\n\nvar getexperienceMoment = function getexperienceMoment(experience) {\n  return convertStringToMoment(prop('created_dt', experience));\n};\n\nvar getDay = function getDay(date) {\n  return moment(date, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD');\n};\n\nvar isExpiredUserErr = function isExpiredUserErr(err) {\n  return err.message === 'Expired Token';\n};\n\nvar initialState = {\n  experiences: [],\n  editingItems: [],\n  filter: initialFilterState,\n  user: {}\n};\n\nvar Sapa =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Sapa, _Component);\n\n  function Sapa() {\n    var _this;\n\n    _classCallCheck(this, Sapa);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Sapa).call(this));\n\n    _this.setFilter = function (filters) {\n      _this.setState(function (prevState) {\n        return set(lensPath(['filter']), filters, prevState);\n      });\n    };\n\n    _this.clearFilter = function (cb) {\n      _this.setFilter(initialFilterState);\n\n      cb();\n    };\n\n    _this.filterexperiences = function (experiences) {\n      var filter = _this.state.filter;\n      var startDateTimeString = concat(concat(filter.startDate, ' '), filter.startTime);\n      var endDateTimeString = concat(concat(filter.endDate, ' '), filter.endTime); // extracts the start and end date/time of the filter and creates a moment for each\n\n      var startDateTime = convertStringToMoment(startDateTimeString);\n      var endDateTime = convertStringToMoment(endDateTimeString); // checks to see if the experience should show based on the filter\n\n      var isInRange = function isInRange(dateTimeMoment) {\n        return startDateTime.isBefore(dateTimeMoment) && endDateTime.isAfter(dateTimeMoment);\n      }; // sort function uses moment's natural sortability\n\n\n      var momentComparator = function momentComparator(experienceA, experienceB) {\n        return getexperienceMoment(experienceB) - getexperienceMoment(experienceA);\n      }; // sort by most recent first\n\n\n      var sortexperiences = function sortexperiences(experiences) {\n        return sort(momentComparator, experiences);\n      };\n\n      return sortexperiences(experiences).filter(function (experience) {\n        return isInRange(getexperienceMoment(experience));\n      });\n    };\n\n    _this.clearUserOnExpiration = function (err) {\n      if (isExpiredUserErr(err)) {\n        _this.setState(initialState);\n      }\n    };\n\n    _this.toggleEditing = function (id) {\n      contains(id, _this.state.editingItems) ? _this.setState(function (prevState) {\n        return {\n          editingItems: without(id, prevState.editingItems)\n        };\n      }) : _this.setState(function (prevState) {\n        return {\n          editingItems: prepend(id, prevState.editingItems)\n        };\n      });\n    };\n\n    _this.loadInitialState =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(cachedUser) {\n        var loadedUser, experiences;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return loadUser(cachedUser.id);\n\n              case 3:\n                loadedUser = _context.sent;\n                _context.next = 6;\n                return loadUserExperiences();\n\n              case 6:\n                experiences = _context.sent;\n\n                _this.setState({\n                  user: loadedUser,\n                  experiences: experiences\n                });\n\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n\n                _this.clearUserOnExpiration(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 10]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.getexperiences =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var experiences;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return loadUserExperiences();\n\n            case 3:\n              experiences = _context2.sent;\n\n              _this.setState({\n                experiences: experiences\n              });\n\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n\n              _this.clearUserOnExpiration(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 7]]);\n    }));\n\n    _this.logout = function () {\n      sessionStorage.clear();\n\n      _this.setState(initialState);\n    };\n\n    _this.saveExperience =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(experience) {\n        var newexperience;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return saveNewExperience(experience);\n\n              case 3:\n                newexperience = _context3.sent;\n\n                _this.addNewexperienceToState(newexperience);\n\n                _context3.next = 11;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                _this.clearUserOnExpiration(_context3.t0);\n\n                _this.addNewexperienceToState(assoc('error', _context3.t0.message, experience));\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.updateExperience =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(experienceId, experience) {\n        var updatedexperience;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return updateExperience(experienceId, experience);\n\n              case 3:\n                updatedexperience = _context4.sent;\n\n                _this.replaceExistingexperienceInState(updatedexperience);\n\n                _context4.next = 11;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                _this.clearUserOnExpiration(_context4.t0);\n\n                _this.replaceExistingexperienceInState(assoc('error', _context4.t0.message, experience));\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[0, 7]]);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.addNewexperienceToState = function (newexperience) {\n      return _this.setState(function (prevState) {\n        return {\n          experiences: append(newexperience, prevState.experiences.filter(complement(propEq)('id', 0)))\n        };\n      });\n    };\n\n    _this.replaceExistingexperienceInState = function (existingexperience) {\n      return _this.setState(function (prevState) {\n        return {\n          experiences: append(existingexperience, prevState.experiences.filter(complement(propEq)('id', existingexperience.id)))\n        };\n      });\n    };\n\n    _this.removeExperience =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(experience) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!experience.id) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                _context5.prev = 1;\n                _context5.next = 4;\n                return deleteExperience(experience.id);\n\n              case 4:\n                _context5.next = 9;\n                break;\n\n              case 6:\n                _context5.prev = 6;\n                _context5.t0 = _context5[\"catch\"](1);\n\n                _this.clearUserOnExpiration(_context5.t0);\n\n              case 9:\n                //remove experience from state\n                _this.setState(function (prevState) {\n                  return {\n                    experiences: filter(complement(propEq)('id', experience.id), prevState.experiences)\n                  };\n                });\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[1, 6]]);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.setLoggedIn = function (user) {\n      return _this.setState({\n        user: user\n      });\n    };\n\n    _this.addNewexperience = function () {\n      _this.setState(function (prevState) {\n        return {\n          experiences: append({\n            \"id\": 0,\n            \"created_dt\": moment().utc().format(dateConstant)\n          }, prevState.experiences.filter(complement(propEq)('id', 0)))\n        };\n      });\n\n      _this.toggleEditing(\"item-0\");\n    };\n\n    _this.state = initialState;\n    return _this;\n  }\n\n  _createClass(Sapa, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var cachedUser = JSON.parse(sessionStorage.getItem('user'));\n\n      if (cachedUser) {\n        this.setState({\n          user: cachedUser\n        });\n        this.loadInitialState(cachedUser);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (isNotEmpty(this.state.user) && !equals(prevState.user, this.state.user)) {\n        //load the experiences\n        this.getexperiences();\n      }\n    } // sets the state of the item filter\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          experiences = _this$state.experiences,\n          editingItems = _this$state.editingItems,\n          filter = _this$state.filter,\n          user = _this$state.user; // determines the groups of experiences per day\n\n      var dayGroups = groupBy(function (experience) {\n        return getDay(prop('created_dt', experience));\n      })(this.filterexperiences(experiences));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(Header, {\n        logout: this.logout,\n        toggleSignUp: this.props.toggleSignUp,\n        setUserLoggedIn: this.setLoggedIn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }), React.createElement(Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"User experiences:\"), React.createElement(ControlPanel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(Button, {\n        id: \"add-experience-button\",\n        inverse: true,\n        disabled: isEmpty(this.state.user),\n        value: \"add experience\",\n        onClick: this.addNewexperience,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      })), React.createElement(Filter, {\n        clearFilter: this.clearFilter,\n        filter: filter,\n        setFilter: this.setFilter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }), React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, keys(dayGroups).map(function (date, idx) {\n        return React.createElement(TableItemGroup, {\n          key: \"group-\".concat(idx),\n          day: date,\n          experiences: dayGroups[date],\n          toggleEditing: _this2.toggleEditing,\n          editingItems: editingItems,\n          idx: idx,\n          saveexperience: _this2.saveExperience,\n          updateexperience: _this2.updateExperience,\n          deleteexperience: _this2.removeExperience,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        });\n      }))));\n    }\n  }]);\n\n  return Sapa;\n}(Component);\n\nexport default Sapa;","map":{"version":3,"sources":["/Users/martinbrandt/sapa/ui/src/pages/Sapa.jsx"],"names":["React","Component","Header","Table","styled","lightGreen","loadUserExperiences","deleteExperience","loadUser","saveNewExperience","updateExperience","updateUser","append","prepend","without","sort","equals","isEmpty","contains","assoc","filter","complement","concat","set","lensPath","keys","propEq","groupBy","prop","Button","TableItemGroup","moment","Filter","headerHeight","inputGreen","Body","div","ControlPanel","StyledInput","input","initialFilterState","startTime","endTime","startDate","endDate","isNotEmpty","dateConstant","convertStringToMoment","date","utc","getexperienceMoment","experience","getDay","format","isExpiredUserErr","err","message","initialState","experiences","editingItems","user","Sapa","setFilter","filters","setState","prevState","clearFilter","cb","filterexperiences","state","startDateTimeString","endDateTimeString","startDateTime","endDateTime","isInRange","dateTimeMoment","isBefore","isAfter","momentComparator","experienceA","experienceB","sortexperiences","clearUserOnExpiration","toggleEditing","id","loadInitialState","cachedUser","loadedUser","getexperiences","logout","sessionStorage","clear","saveExperience","newexperience","addNewexperienceToState","experienceId","updatedexperience","replaceExistingexperienceInState","existingexperience","removeExperience","setLoggedIn","addNewexperience","JSON","parse","getItem","prevProps","dayGroups","props","toggleSignUp","map","idx"],"mappings":"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","sourcesContent":["import React, {Component,} from 'react';\nimport Header from 'components/Header';\nimport Table from 'components/Table';\nimport styled from 'styled-components';\nimport {lightGreen} from 'variables';\nimport {loadUserExperiences, deleteExperience, loadUser, saveNewExperience, updateExperience, updateUser} from 'Api';\nimport {append, prepend, without, sort, equals, isEmpty, contains, assoc, filter, complement, concat, set, lensPath, keys, propEq, groupBy, prop} from 'ramda';\nimport Button from 'components/Button';\nimport TableItemGroup from 'components/TableItemGroup';\nimport moment from 'moment';\nimport Filter from 'components/Filter';\nimport {headerHeight, inputGreen} from 'variables';\n\nconst Body = styled.div`\n  background-color: ${lightGreen};\n  height: calc(100vh - ${headerHeight} - 70px) ;\n  margin: 30px 30px 0 30px;\n  padding: 20px;\n  overflow: auto;\n`;\n\nconst ControlPanel = styled.div`\n  background-color: ${lightGreen};\n  height: 60px;\n  display:flex;\n  flex-direction:row;\n  margin: 30px;\n  align-items: center;\n  justify-content: center\n`;\n\nconst StyledInput = styled.input`\n    border:none;\n    height:30px;\n    font-size: 14px;\n    margin: 5px;\n    padding:5px;\n    text-align: center;\n    background-color: ${inputGreen}\n`\n\nconst initialFilterState = {\n    startTime: '00:00:00',\n    endTime: '23:59:59',\n    startDate: '1900-01-01',\n    endDate: '2090-01-01'\n}\n\nconst isNotEmpty = complement(isEmpty)\n\nconst dateConstant = 'YYYY-MM-DD HH:mm:ss'\n\nconst convertStringToMoment = date => moment(date, dateConstant).utc()\n\nconst getexperienceMoment = experience => convertStringToMoment(prop('created_dt', experience))\n\nconst getDay = date => moment(date, 'YYYY-MM-DD HH:mm:ss').format('YYYY-MM-DD')\n\nconst isExpiredUserErr = err => err.message === 'Expired Token'\n\nconst initialState = {\n    experiences:[],\n    editingItems: [],\n    filter: initialFilterState,\n    user: {},\n};\n\nclass Sapa extends Component {\n    constructor() {\n        super();\n        this.state = initialState;\n    }\n\n    componentDidMount(){\n        const cachedUser = JSON.parse(sessionStorage.getItem('user'));\n        if(cachedUser){\n            this.setState({user: cachedUser})\n            this.loadInitialState(cachedUser);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(isNotEmpty(this.state.user) && !equals(prevState.user, this.state.user)){\n            //load the experiences\n            this.getexperiences();\n            \n        }\n    }\n\n    // sets the state of the item filter\n    setFilter = filters => {\n        this.setState(prevState => set(lensPath(['filter']), filters, prevState))\n    }\n\n    // resets the state of the item filter\n    clearFilter = cb => {\n        this.setFilter(initialFilterState)\n        cb();\n    }\n\n    // executes on click of the \"filter\" button, filters the experiences in state that are sent down the tree\n    filterexperiences = experiences => {\n        const {filter} = this.state;\n        const startDateTimeString = concat(concat(filter.startDate,' '), filter.startTime);\n        const endDateTimeString = concat(concat(filter.endDate,' '), filter.endTime);\n\n        // extracts the start and end date/time of the filter and creates a moment for each\n        const startDateTime = convertStringToMoment(startDateTimeString);\n        const endDateTime = convertStringToMoment(endDateTimeString);\n        \n        // checks to see if the experience should show based on the filter\n        const isInRange = dateTimeMoment => startDateTime.isBefore(dateTimeMoment) && endDateTime.isAfter(dateTimeMoment)\n        \n        // sort function uses moment's natural sortability\n        const momentComparator = (experienceA, experienceB) => getexperienceMoment(experienceB) - getexperienceMoment(experienceA);\n\n        // sort by most recent first\n        const sortexperiences = experiences => sort(momentComparator, experiences)\n\n        return sortexperiences(experiences).filter(experience => isInRange(getexperienceMoment(experience)));\n\n    }  \n\n    clearUserOnExpiration = err => {\n        if(isExpiredUserErr(err)){\n            this.setState(initialState)\n        }\n    }\n\n    // toggles the list item editing state based on its ID\n    toggleEditing = id => {\n        contains(id, this.state.editingItems) ? \n        this.setState(prevState => ({editingItems: without(id, prevState.editingItems)})) :\n        this.setState(prevState => ({editingItems: prepend(id, prevState.editingItems)}))\n    }\n\n    // sets up the initial state, called when component mounts\n    // loads newest version of cached user\n    loadInitialState = async cachedUser => {\n        try {\n            const loadedUser = await loadUser(cachedUser.id);\n            const experiences = await loadUserExperiences();\n\n            this.setState({user: loadedUser, experiences: experiences});\n        } catch (err){\n            this.clearUserOnExpiration(err)\n        }\n    }\n\n    // retrieves the user's experiences and sets the state\n    getexperiences = async () => {\n        try {\n            const experiences = await loadUserExperiences();\n            this.setState({experiences: experiences});\n        } catch (err){\n            this.clearUserOnExpiration(err);\n        }\n    }\n\n    // clears the user from the session and resets state to an empty user\n    logout = () => {\n        sessionStorage.clear();\n        this.setState(initialState)\n    }\n\n    // saves a new user experience, and adds the new experience to the state\n    saveExperience = async experience => {\n        try {\n            const newexperience = await saveNewExperience(experience);\n            this.addNewexperienceToState(newexperience)\n        } catch(err){\n            this.clearUserOnExpiration(err);\n            this.addNewexperienceToState(assoc('error', err.message, experience))\n        }\n        \n    }\n\n    // updates a user experience and replaces experience with updated experience in state\n    updateExperience = async (experienceId, experience) => {\n        try {\n            const updatedexperience = await updateExperience(experienceId, experience);\n            this.replaceExistingexperienceInState(updatedexperience)\n        } catch(err){\n            this.clearUserOnExpiration(err);\n            this.replaceExistingexperienceInState(assoc('error', err.message, experience))\n        }\n    }\n    // util function to add a new experience, and remove new experience stub from state\n    addNewexperienceToState = newexperience => this.setState(prevState => ({\n        experiences: append(newexperience, prevState.experiences.filter(complement(propEq)('id', 0)))\n    }))\n\n    // util function to filter out existing experience and add the updated version to state\n    replaceExistingexperienceInState = existingexperience => this.setState(prevState => ({\n        experiences: append(existingexperience, prevState.experiences.filter(complement(propEq)('id', existingexperience.id)))\n    }))\n\n    // deletes the experience and removes it from the state\n    removeExperience = async experience => {\n        if(experience.id) {\n          try {\n              await deleteExperience(experience.id)\n          } catch(err){\n            this.clearUserOnExpiration(err);\n          }\n        }\n        //remove experience from state\n        this.setState(prevState => ({experiences: filter(complement(propEq)('id', experience.id), prevState.experiences)}));\n    }\n\n    // sets the user in state on login\n    setLoggedIn = user => this.setState({user:user});\n\n    // adds a new experience stub to the state, only allows one experience to be added at a time\n    addNewexperience= () => {\n        this.setState(prevState => ({experiences: append({\"id\":0, \"created_dt\": moment().utc().format(dateConstant)}, prevState.experiences.filter(complement(propEq)('id', 0)))}));\n        this.toggleEditing(\"item-0\");\n    }\n\n\n    render(){\n        const {experiences, editingItems, filter, user} = this.state;\n\n        // determines the groups of experiences per day\n        const dayGroups = groupBy(experience => getDay(prop('created_dt', experience)))(this.filterexperiences(experiences));\n        \n        return <div>\n                    <Header logout={this.logout} toggleSignUp={this.props.toggleSignUp} setUserLoggedIn={this.setLoggedIn}/>\n                    <Body>\n                        <h3>User experiences:</h3>\n                        <ControlPanel>\n                            <Button id='add-experience-button' inverse disabled={isEmpty(this.state.user)} value='add experience' onClick={this.addNewexperience}/>\n                        </ControlPanel>\n\n                        <Filter clearFilter={this.clearFilter} filter={filter} setFilter={this.setFilter}/>\n                        <Table >{keys(dayGroups).map((date, idx) => \n                            <TableItemGroup \n                                key={`group-${idx}`}\n                                day={date}\n                                experiences={dayGroups[date]}\n                                toggleEditing={this.toggleEditing}\n                                editingItems={editingItems} \n                                idx={idx}\n                                saveexperience={this.saveExperience}\n                                updateexperience={this.updateExperience}\n                                deleteexperience={this.removeExperience}\n                            />\n                        )}</Table>\n        \n                    </Body>\n               \n               </div>\n    }\n}\n\n\nexport default Sapa;\n"]},"metadata":{},"sourceType":"module"}